generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  CLIENT
  PROVIDER
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  type      UserType
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clientBookings   Booking[] @relation("ClientBookings")
  providerBookings Booking[] @relation("ProviderBookings") 
  reviews          Review[]
  tokens           AuthToken[]

  @@map("users")
}

model Service {
  id          String @id @default(cuid())
  name        String @unique
  description String
  category    String
  basePrice   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bookings Booking[]

  @@map("services")
}

model Booking {
  id          String        @id @default(cuid())
  clientId    String
  providerId  String?
  serviceId   String
  status      BookingStatus @default(PENDING)
  scheduledAt DateTime
  completedAt DateTime?
  notes       String?
  totalAmount Float?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  client   User    @relation("ClientBookings", fields: [clientId], references: [id])
  provider User?   @relation("ProviderBookings", fields: [providerId], references: [id])
  service  Service @relation(fields: [serviceId], references: [id])
  review   Review?

  @@map("bookings")
}

model Review {
  id        String @id @default(cuid())
  bookingId String @unique
  userId    String
  rating    Int    @db.SmallInt // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model AuthToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("auth_tokens")
}